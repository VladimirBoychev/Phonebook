
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Xml.Linq;
using System.Xml.Serialization;

//Project by Eva Vladimirova 12/A1
class Gradebook
{
    static Dictionary<string, List<int>> students = new Dictionary<string, List<int>>();
    static Dictionary<string, List<string>> studentCourses = new Dictionary<string, List<string>>();
    static Dictionary<string, int> studentTotalCredits = new Dictionary<string, int>();
    static Dictionary<string, int> Courses = new Dictionary<string, int>();

    static void Main()
    {

        Boolean ProgramRunning = true;
        while (ProgramRunning)
        {
            Console.WriteLine(" ");
            Console.WriteLine("Class Menu:");
            Console.WriteLine("1. Add Student");
            Console.WriteLine("2. Search for Student and grades");
            Console.WriteLine("3. Delete Student");
            Console.WriteLine("4. Display all students's grades");
            Console.WriteLine("5. Calculate the avarage grade");
            Console.WriteLine("6. Add a Cource");
            Console.WriteLine("7. Display a student's credits");
            Console.WriteLine("8. Find and Display Duplicates");
            Console.WriteLine("9. Exit");
            Console.Write("Enter your choice: ");


            int choice;
            if (int.TryParse(Console.ReadLine(), out choice))
            {
                if (choice == 1)
                {
                    addStudent();
                }

                if (choice == 2)
                {
                    SearchStudent();
                }
                if (choice == 3)
                {
                    DeleteStudent();
                }
                if (choice == 4)
                {
                    Display();
                }
                //if (choice == 6)
                //{
                //	ProgramRunning = false;
                //}
                if (choice == 5)
                {
                    AvarageGrade();
                }
                if (choice == 6)
                {
                    addCourse();
                }

                if (choice == 7)
                {
                    DisplayCredits();
                }

                if (choice == 8)
                {
                    FindDuplicateListElements();
                }
                if (choice > 9)
                {
                    Console.WriteLine("Enter a valid choice number");

                }

            }

        }
    }

    public static void addStudent()
    {
        Console.Write("Enter the name of the student: ");
        string name = Console.ReadLine();

        List<int> grades = new List<int>();

        bool addGrades = true;
        while (addGrades)
        {
            Console.Write("Enter a grade (or 'done' to finish entering grades): ");
            string grade = Console.ReadLine();

            if (grade.ToLower() == "done")
            {
                addGrades = false;
            }
            else if (int.TryParse(grade, out int i))
            {
                grades.Add(i);
            }
            else
            {
                Console.WriteLine("Invalid input. Please enter a numeric grade.");
            }
        }

        Console.WriteLine("How many cources does the student visit?");
        int numC = Convert.ToInt32(Console.ReadLine());

        Console.WriteLine("What does he visit?");
        List<string> courcesList = new List<string>();

        for (int i = 0; i < numC; i++)
        {
            courcesList.Add(Console.ReadLine());
        }

        if (!students.ContainsKey(name))
        {
            students[name] = grades;
            studentCourses.Add(name, courcesList);
            Console.WriteLine("Added successfully.");
        }
        else
        {
            Console.WriteLine("Student already exists. Use the update option to modify the student.");
        }

        foreach (var student in studentCourses.Keys)
        {
            int totalCredits = 0;
            if (studentCourses.ContainsKey(student))
            {
                foreach (var course in studentCourses[student])
                {
                    if (Courses.ContainsKey(course))
                    {
                        totalCredits += Courses[course];
                    }
                    studentTotalCredits[student] = totalCredits;

                }
            }
        }
    }
    public static void SearchStudent()
    {
        Console.Write("Enter the name to search: ");
        string name = Console.ReadLine();

        if (students.ContainsKey(name))
        {
            Console.WriteLine($"Name: {name} Grades: {string.Join(", ", students[name])}");
        }
        else
        {
            Console.WriteLine("Student not found.");
        }

    }

    public static void DeleteStudent()
    {
        Console.Write("Enter the name to delete: ");
        string name = Console.ReadLine();

        if (students.ContainsKey(name))
        {
            students.Remove(name);
            Console.WriteLine("Student deleted successfully.");
        }
        else
        {
            Console.WriteLine("Student not found.");
        }
    }

    public static void Display()
    {
        Console.WriteLine();

        Console.WriteLine("The glorious classbook");
        Console.WriteLine();
        foreach (var kvp in students)
        {

            Console.WriteLine($"Name: {kvp.Key}  Grades: {string.Join(", ", kvp.Value)}   Courses: ");
        }

        foreach (var STUDENT in studentCourses)
        {
            List<string> c = STUDENT.Value;

            foreach (var student in c)
            {
                Console.Write(c.ToString());
                Console.Write(" ,");
            }
        }
        foreach (var student in studentTotalCredits)
        {
            int key = student.Value;
            Console.WriteLine($"  Credits: {key} ");

        }

    }
    public static void AvarageGrade()
    {
        double sum = 0;
        int count = 0;

        foreach (var kvp in students)
        {
            sum += kvp.Value.Average();
            count++;
        }

        double average = sum / count;
        Console.WriteLine($"The average grade is {average:F2}");
    }
    public static void addCourse()
    {
        Console.Write("Enter the name of the cource: ");
        string name = Console.ReadLine();
        Console.Write("Enter the credits of the course: ");
        int credits = Convert.ToInt32(Console.ReadLine());
        if (!Courses.ContainsKey(name))
        {
            Courses[name] = credits;
            Console.WriteLine("Added successfully.");

        }
        else
        {
            Console.WriteLine("Student already exists. Use the update option to modify the student.");
        }

    }

    public static void DisplayCredits()
    {
        Console.WriteLine("Whose student credits do you want to see?");
        string name = Console.ReadLine();

        if (studentTotalCredits.ContainsKey(name))
        {
            Console.WriteLine($"Name: {name}, credits: {studentTotalCredits[name]}");
        }
        else
        {
            Console.WriteLine("Student not found.");
        }
    }

    static void FindDuplicateListElements()
    {

        foreach (var student in students)
        {
            string s = student.Key;

            List<int> values = student.Value;
            Dictionary<int, int> dublicates = new Dictionary<int, int>();

            foreach (int value in values)
            {
                if (dublicates.ContainsKey(value))
                {
                    dublicates[value]++;
                }
                else
                {
                    dublicates[value] = 1;
                }

            }

            foreach (var i in dublicates)
            {
                if (i.Value > 1)
                {
                    Console.WriteLine($"The grade {i.Key} appears in {student.Key}'s gradebook {i.Value} times");
                }
                else { }

            }
        }
    }
}
